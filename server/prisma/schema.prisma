// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                    String              @id @default(uuid())
    userName              String
    email                 String              @unique
    photo                 String
    Member                Member[]
    Workspace             Workspace[]
    comments              Comment[]
    likes                 Like[]
    senderNotifications   Notification[]      @relation("sender-notifications")
    recieverNotifications Notification[]      @relation("reciever-notifications")
    todoContainer         TodoContainer[]
    todoCard              TodoCard[]
    todos                 Todo[]
    progressContainers    ProgressContainer[]
    galleryContainers     GalleryContainer[]
    progresses            Progress[]
    galleryPhotos         Photo[]
}

model Workspace {
    id            String              @id @default(uuid())
    name          String
    logo          String
    admin         User                @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId       String
    createdAt     DateTime            @default(now())
    Member        Member[]
    Gallery       GalleryContainer[]
    Progress      ProgressContainer[]
    TodoContainer TodoContainer[]
    invitations   Invitation[]
    notifications Notification[]
    chats         Chat[]
}

enum ChatType {
    ALL
    LANCERS
    CLIENTS
}

model Chat {
    id              String           @id @default(uuid())
    workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId     String
    chatWithMembers ChatWithMember[]
    chatMessages    ChatMessage[]
    type            ChatType
}

model ChatWithMember {
    chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId   String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId String

    @@id([chatId, memberId])
}

model ChatMessage {
    id        String   @id @default(uuid())
    message   String
    chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId    String
    member    Member?  @relation(fields: [memberId], references: [id], onDelete: SetNull)
    memberId  String?
    createdAt DateTime @default(now())
}

model Member {
    id                  String           @id @default(uuid())
    user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    role                Role             @default(CLIENT)
    userId              String
    createdAt           DateTime         @default(now())
    workspace           Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId         String
    senderInvitations   Invitation[]     @relation("sender-invitations")
    recieverInvitations Invitation[]     @relation("reciever-invitations")
    chatMessages        ChatMessage[]
    chatWithMembers     ChatWithMember[]

    @@unique([workspaceId, userId])
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model Invitation {
    id           String           @id @default(uuid())
    message      String
    status       InvitationStatus @default(PENDING)
    sender       Member?          @relation("sender-invitations", fields: [senderId], references: [id], onDelete: SetNull)
    senderId     String?
    reciever     Member           @relation("reciever-invitations", fields: [recieverId], references: [id], onDelete: Cascade)
    recieverId   String
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    workspace    Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    notification Notification?
}

enum NotificationType {
    INVITATION
    ACCEPTED_INVITATION
    DECLINED_INVITATION
    NORMAL
    INVITATION_CREATOR
    WORKSPACE_TITLE_UPDATE
    DELETE_WORKSPACE
    APPOINT_ADMIN
    APPOINT_ADMIN_ACCEPTED
    APPOINT_ADMIN_DECLINED
    APPOINT_ADMIN_CREATOR
}

model Notification {
    id           String           @id @default(uuid())
    type         NotificationType @default(NORMAL)
    message      String
    read         Boolean          @default(false)
    sender       User?            @relation("sender-notifications", fields: [senderId], references: [id], onDelete: Cascade)
    senderId     String?
    reciever     User             @relation("reciever-notifications", fields: [recieverId], references: [id], onDelete: Cascade)
    recieverId   String
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    invitation   Invitation?      @relation(fields: [invitationId], references: [id], onDelete: Cascade)
    invitationId String?          @unique
    workspace    Workspace?       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String?
}

model GalleryContainer {
    id              String    @id @default(uuid())
    title           String
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId     String
    createdAt       DateTime  @default(now())
    Photo           Photo[]
    user            User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId String
}

model ProgressContainer {
    id              String     @id @default(uuid())
    title           String
    workspace       Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId     String
    createdAt       DateTime   @default(now())
    Progress        Progress[]
    user            User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId String
}

model Progress {
    id                  String            @id @default(uuid())
    title               String
    progressPercent     Int
    progressContainer   ProgressContainer @relation(fields: [progressContainerId], references: [id], onDelete: Cascade)
    progressContainerId String
    user                User              @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId     String
}

model Photo {
    id                 String           @id @default(uuid())
    url                String
    galleryContainer   GalleryContainer @relation(fields: [galleryContainerId], references: [id], onDelete: Cascade)
    galleryContainerId String
    user               User             @relation(fields: [uploadedByUserId], references: [id], onDelete: Cascade)
    uploadedByUserId   String
}

model TodoContainer {
    id              String     @id @default(uuid())
    title           String
    workspace       Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId     String
    createdAt       DateTime   @default(now())
    TodoCard        TodoCard[]
    user            User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId String
}

model TodoCard {
    id              String        @id @default(uuid())
    title           String
    createdAt       DateTime      @default(now())
    todoContainer   TodoContainer @relation(fields: [todoContainerId], references: [id], onDelete: Cascade)
    todoContainerId String
    Todo            Todo[]
    user            User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId String

    @@unique([id, todoContainerId])
}

model Todo {
    id              String    @id @default(uuid())
    text            String
    dueDate         DateTime
    status          String
    description     String?
    completed       Boolean   @default(false)
    completionDate  DateTime?
    createdAt       DateTime  @default(now())
    comments        Comment[]
    todoCard        TodoCard  @relation(fields: [todoCardId], references: [id], onDelete: Cascade)
    todoCardId      String
    user            User      @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByUserId String

    @@unique([id, todoCardId])
}

model Comment {
    id        String    @id @default(uuid())
    contents  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    todo      Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade)
    todoId    String
    parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children  Comment[] @relation("ParentChild")
    parentId  String?
    likes     Like[]
}

model Like {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    createdAt DateTime @default(now())

    @@unique([userId, commentId])
}

model Admin {
    id       String @id @default(uuid())
    username String
    password String
}

enum Role {
    ADMIN
    LANCER
    CLIENT
}
