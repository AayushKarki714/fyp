// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String      @id @default(uuid())
    userName  String
    email     String      @unique
    photo     String
    Member    Member[]
    Workspace Workspace[]
}

model Workspace {
    id            String              @id @default(uuid())
    name          String
    logo          String
    admin         User                @relation(fields: [adminId], references: [id])
    adminId       String
    createdAt     DateTime            @default(now())
    Member        Member[]
    Gallery       GalleryContainer[]
    Progress      ProgressContainer[]
    TodoContainer TodoContainer[]
}

model Member {
    id          String    @id @default(uuid())
    user        User      @relation(fields: [userId], references: [id])
    role        Role
    userId      String
    createdAt   DateTime  @default(now())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
}

model GalleryContainer {
    id          String    @id @default(uuid())
    title       String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
    createdAt   DateTime  @default(now())
    Photo       Photo[]
}

model ProgressContainer {
    id          String     @id @default(uuid())
    title       String
    workspace   Workspace  @relation(fields: [workspaceId], references: [id])
    workspaceId String
    createdAt   DateTime   @default(now())
    Progress    Progress[]
}

model Progress {
    id                  String            @id @default(uuid())
    title               String
    progressPercent     Int
    progressContainer   ProgressContainer @relation(fields: [progressContainerId], references: [id])
    progressContainerId String
}

model Photo {
    id                 String           @id @default(uuid())
    url                String
    galleryContainer   GalleryContainer @relation(fields: [galleryContainerId], references: [id])
    galleryContainerId String
}

model TodoContainer {
    id          String     @id @default(uuid())
    title       String
    workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    createdAt   DateTime   @default(now())
    TodoCard    TodoCard[]
}

model TodoCard {
    id              String        @id @default(uuid())
    title           String
    createdAt       DateTime      @default(now())
    todoContainer   TodoContainer @relation(fields: [todoContainerId], references: [id], onDelete: Cascade)
    todoContainerId String
    Todo            Todo[]
}

model Todo {
    id         String   @id @default(uuid())
    text       String
    dueDate    DateTime
    status     String
    createdAt  DateTime @default(now())
    todoCard   TodoCard @relation(fields: [todoCardId], references: [id], onDelete: Cascade)
    todoCardId String
}

enum Role {
    ADMIN
    LANCER
    CLIENT
}
