// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(uuid())
    userName      String
    email         String         @unique
    photo         String
    Member        Member[]
    Workspace     Workspace[]
    comments      Comment[]
    likes         Like[]
    notifications Notification[]
}

model Workspace {
    id            String              @id @default(uuid())
    name          String
    logo          String
    admin         User                @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId       String
    createdAt     DateTime            @default(now())
    Member        Member[]
    Gallery       GalleryContainer[]
    Progress      ProgressContainer[]
    TodoContainer TodoContainer[]
    notifications Notification[]
}

model Member {
    id               String           @id @default(uuid())
    user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    role             Role             @default(CLIENT)
    userId           String
    invitationStatus InvitationStatus @default(PENDING)
    createdAt        DateTime         @default(now())
    workspace        Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId      String

    @@unique([workspaceId, userId])
}

model GalleryContainer {
    id          String    @id @default(uuid())
    title       String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    createdAt   DateTime  @default(now())
    Photo       Photo[]
}

model ProgressContainer {
    id          String     @id @default(uuid())
    title       String
    workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    createdAt   DateTime   @default(now())
    Progress    Progress[]
}

model Progress {
    id                  String            @id @default(uuid())
    title               String
    progressPercent     Int
    progressContainer   ProgressContainer @relation(fields: [progressContainerId], references: [id], onDelete: Cascade)
    progressContainerId String
}

model Photo {
    id                 String           @id @default(uuid())
    url                String
    galleryContainer   GalleryContainer @relation(fields: [galleryContainerId], references: [id], onDelete: Cascade)
    galleryContainerId String
}

model TodoContainer {
    id          String     @id @default(uuid())
    title       String
    workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    createdAt   DateTime   @default(now())
    TodoCard    TodoCard[]
}

model TodoCard {
    id              String        @id @default(uuid())
    title           String
    createdAt       DateTime      @default(now())
    todoContainer   TodoContainer @relation(fields: [todoContainerId], references: [id], onDelete: Cascade)
    todoContainerId String
    Todo            Todo[]

    @@unique([id, todoContainerId])
}

model Todo {
    id             String    @id @default(uuid())
    text           String
    dueDate        DateTime
    status         String
    description    String?
    completed      Boolean   @default(false)
    completionDate DateTime?
    createdAt      DateTime  @default(now())
    comments       Comment[]
    todoCard       TodoCard  @relation(fields: [todoCardId], references: [id], onDelete: Cascade)
    todoCardId     String

    @@unique([id, todoCardId])
}

model Comment {
    id        String    @id @default(uuid())
    contents  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    todo      Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade)
    todoId    String
    parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children  Comment[] @relation("ParentChild")
    parentId  String?
    likes     Like[]
}

model Like {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    createdAt DateTime @default(now())

    @@unique([userId, commentId])
}

model Notification {
    id               String           @id @default(uuid())
    read             Boolean          @default(false)
    createdAt        DateTime         @default(now())
    message          String
    updatedAt        DateTime         @updatedAt
    workspace        Workspace?       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId      String?
    notificationType NotificationType @default(NORMAL)
    user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
}

enum Role {
    ADMIN
    LANCER
    CLIENT
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    DECLINED
}

enum NotificationType {
    INVITATION
    NORMAL
}
